---
- name: Get subnet facts
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name": "Private*"
  register: vpc_subnets

- name: Set subnet_ids fact
  set_fact:
    subnet_ids: "{{ vpc_subnets.subnets | map(attribute='id') | list | shuffle }}"

- name: Deploy the required instances on the correct subnets
  ec2:
    region: "{{ region }}"
    key_name: "{{ keypair }}"
    image: "{{ image_id }}"
    wait: yes
    group_id: "{{ secgroup.group_id }}"
    wait_timeout: 300
    count: "{{ ( instance_count | int ) - 1 }}"
    monitoring: no
    instance_profile_name: "{{ iam_role | default(omit) }}"
    termination_protection: "{{ protect_termination | default(omit) }}"
    vpc_subnet_id:  "{{ item }}"
    assign_public_ip: "{{ use_public_ip | default(no) }}"
    instance_type: "{{ instance_type }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: "{{ volume_type }}"
        volume_size: "{{ root_disk_size }}"
        delete_on_termination: True
  register: ec2_instances
  with_items:  "{{ subnet_ids }}"

- name: Add tag to EC2 instances
  ec2_tag:
    region: "{{ region }}"
    resource: "{{ ec2_instances.results[(item|int)].instances[0].id }}"
    state: present
    tags:
      Name: "{{ component_name }}-{{ item }}"
  with_sequence: start=0 end={{ ( instance_count | int ) - 1 }}

# - name: Get list of associated EBS volumes
#   ec2_vol:
#     instance: "{{ item.instances[0].id  }}"
#     state: list
#     region: "{{ region }}"
#   register: ec2_vol_out
#   with_items: "{{ ec2_instances.results }}"
#
# - debug: var=ec2_vol_out
#
# - name: Add tag to EBS Volume (root) /dev/xvda
#   ec2_tag:
#     region: "{{ region }}"
#     resource: "{{ item.volumes[0].id  }}"
#     state: present
#     tags:
#       Name: "{{ component_name }}-{{ item }}"
#   with_items: "{{ ec2_vol_out.results[].volumes[].id }}"
#
- name: Add new instance to host group
  add_host:
    groupname: ec2_hosts
    hostname: "{{ ec2_instances.results[(item|int)].instances[0].private_ip }}"
    host_index: "{{ ec2_instances.results[(item|int)].instances[0].placement }}-{{ item }}"
  with_sequence: start=0 end={{ ( instance_count | int ) - 1 }}
  register: ip2use

- debug: var=ip2use
# - name: Wait for the instances to boot by checking the ssh port
#   wait_for:
#     port=22
#     delay=30
#     timeout=300
#     state=started
#     host = "{{ item.add_host.host_name }}"
#   with_items: "{{ ip2use.results }}"
#
# - name: Wait a bit while the instance actually comes up.
#   command: /bin/sleep 60

- debug: var=ec2_instances.results

# - name: Set default empty list for ec2_ids
#   set_fact: ec2_ids=[]
#
- name: Register instance IDs of ec2 instances
  set_fact:
    ec2_ids: "{{ ec2_instances | json_query('results[*].instance_ids'}}"

- debug: var=ec2_ids

- name: Set default empty list for ec2_IPS
  set_fact: ec2_IPS=[]

- name: Register internal IPs of ec2 instances
  set_fact:
    ec2_IPS: "{{ ec2_IPS }} + [ '{{item.private_ip }}' ]"
  with_items: "{{ ec2_instances.instances }}"

- debug: var=ec2_IPS
